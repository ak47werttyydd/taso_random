// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rules.proto

#include "rules.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace GraphSubst {
PROTOBUF_CONSTEXPR Parameter::Parameter(
    ::_pbi::ConstantInitialized)
  : key_(0)
  , value_(0){}
struct ParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParameterDefaultTypeInternal() {}
  union {
    Parameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParameterDefaultTypeInternal _Parameter_default_instance_;
PROTOBUF_CONSTEXPR Tensor::Tensor(
    ::_pbi::ConstantInitialized)
  : opid_(0)
  , tsid_(0){}
struct TensorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TensorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TensorDefaultTypeInternal() {}
  union {
    Tensor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TensorDefaultTypeInternal _Tensor_default_instance_;
PROTOBUF_CONSTEXPR Operator::Operator(
    ::_pbi::ConstantInitialized)
  : input_()
  , para_()
  , type_(0){}
struct OperatorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OperatorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OperatorDefaultTypeInternal() {}
  union {
    Operator _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OperatorDefaultTypeInternal _Operator_default_instance_;
PROTOBUF_CONSTEXPR MapOutput::MapOutput(
    ::_pbi::ConstantInitialized)
  : srcopid_(0)
  , dstopid_(0)
  , srctsid_(0)
  , dsttsid_(0){}
struct MapOutputDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapOutputDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapOutputDefaultTypeInternal() {}
  union {
    MapOutput _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapOutputDefaultTypeInternal _MapOutput_default_instance_;
PROTOBUF_CONSTEXPR Rule::Rule(
    ::_pbi::ConstantInitialized)
  : srcop_()
  , dstop_()
  , mappedoutput_(){}
struct RuleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RuleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RuleDefaultTypeInternal() {}
  union {
    Rule _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RuleDefaultTypeInternal _Rule_default_instance_;
PROTOBUF_CONSTEXPR RuleCollection::RuleCollection(
    ::_pbi::ConstantInitialized)
  : rule_(){}
struct RuleCollectionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RuleCollectionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RuleCollectionDefaultTypeInternal() {}
  union {
    RuleCollection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RuleCollectionDefaultTypeInternal _RuleCollection_default_instance_;
}  // namespace GraphSubst
static ::_pb::Metadata file_level_metadata_rules_2eproto[6];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_rules_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_rules_2eproto = nullptr;

const uint32_t TableStruct_rules_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::GraphSubst::Parameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GraphSubst::Parameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GraphSubst::Parameter, key_),
  PROTOBUF_FIELD_OFFSET(::GraphSubst::Parameter, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::GraphSubst::Tensor, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GraphSubst::Tensor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GraphSubst::Tensor, opid_),
  PROTOBUF_FIELD_OFFSET(::GraphSubst::Tensor, tsid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::GraphSubst::Operator, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GraphSubst::Operator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GraphSubst::Operator, type_),
  PROTOBUF_FIELD_OFFSET(::GraphSubst::Operator, input_),
  PROTOBUF_FIELD_OFFSET(::GraphSubst::Operator, para_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::GraphSubst::MapOutput, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GraphSubst::MapOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GraphSubst::MapOutput, srcopid_),
  PROTOBUF_FIELD_OFFSET(::GraphSubst::MapOutput, dstopid_),
  PROTOBUF_FIELD_OFFSET(::GraphSubst::MapOutput, srctsid_),
  PROTOBUF_FIELD_OFFSET(::GraphSubst::MapOutput, dsttsid_),
  0,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GraphSubst::Rule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GraphSubst::Rule, srcop_),
  PROTOBUF_FIELD_OFFSET(::GraphSubst::Rule, dstop_),
  PROTOBUF_FIELD_OFFSET(::GraphSubst::Rule, mappedoutput_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GraphSubst::RuleCollection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GraphSubst::RuleCollection, rule_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::GraphSubst::Parameter)},
  { 10, 18, -1, sizeof(::GraphSubst::Tensor)},
  { 20, 29, -1, sizeof(::GraphSubst::Operator)},
  { 32, 42, -1, sizeof(::GraphSubst::MapOutput)},
  { 46, -1, -1, sizeof(::GraphSubst::Rule)},
  { 55, -1, -1, sizeof(::GraphSubst::RuleCollection)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::GraphSubst::_Parameter_default_instance_._instance,
  &::GraphSubst::_Tensor_default_instance_._instance,
  &::GraphSubst::_Operator_default_instance_._instance,
  &::GraphSubst::_MapOutput_default_instance_._instance,
  &::GraphSubst::_Rule_default_instance_._instance,
  &::GraphSubst::_RuleCollection_default_instance_._instance,
};

const char descriptor_table_protodef_rules_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013rules.proto\022\nGraphSubst\"\'\n\tParameter\022\013"
  "\n\003key\030\001 \002(\005\022\r\n\005value\030\002 \002(\005\"$\n\006Tensor\022\014\n\004"
  "opId\030\001 \002(\005\022\014\n\004tsId\030\002 \002(\005\"`\n\010Operator\022\014\n\004"
  "type\030\001 \002(\005\022!\n\005input\030\002 \003(\0132\022.GraphSubst.T"
  "ensor\022#\n\004para\030\003 \003(\0132\025.GraphSubst.Paramet"
  "er\"O\n\tMapOutput\022\017\n\007srcOpId\030\001 \002(\005\022\017\n\007dstO"
  "pId\030\002 \002(\005\022\017\n\007srcTsId\030\003 \002(\005\022\017\n\007dstTsId\030\004 "
  "\002(\005\"}\n\004Rule\022#\n\005srcOp\030\001 \003(\0132\024.GraphSubst."
  "Operator\022#\n\005dstOp\030\002 \003(\0132\024.GraphSubst.Ope"
  "rator\022+\n\014mappedOutput\030\003 \003(\0132\025.GraphSubst"
  ".MapOutput\"0\n\016RuleCollection\022\036\n\004rule\030\001 \003"
  "(\0132\020.GraphSubst.Rule"
  ;
static ::_pbi::once_flag descriptor_table_rules_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_rules_2eproto = {
    false, false, 460, descriptor_table_protodef_rules_2eproto,
    "rules.proto",
    &descriptor_table_rules_2eproto_once, nullptr, 0, 6,
    schemas, file_default_instances, TableStruct_rules_2eproto::offsets,
    file_level_metadata_rules_2eproto, file_level_enum_descriptors_rules_2eproto,
    file_level_service_descriptors_rules_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_rules_2eproto_getter() {
  return &descriptor_table_rules_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_rules_2eproto(&descriptor_table_rules_2eproto);
namespace GraphSubst {

// ===================================================================

class Parameter::_Internal {
 public:
  using HasBits = decltype(std::declval<Parameter>()._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

Parameter::Parameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:GraphSubst.Parameter)
}
Parameter::Parameter(const Parameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&key_, &from.key_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&key_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:GraphSubst.Parameter)
}

inline void Parameter::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&key_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&key_)) + sizeof(value_));
}

Parameter::~Parameter() {
  // @@protoc_insertion_point(destructor:GraphSubst.Parameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Parameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Parameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Parameter::Clear() {
// @@protoc_insertion_point(message_clear_start:GraphSubst.Parameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&key_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&key_)) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Parameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_key(&has_bits);
          key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Parameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GraphSubst.Parameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_key(), target);
  }

  // required int32 value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GraphSubst.Parameter)
  return target;
}

size_t Parameter::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GraphSubst.Parameter)
  size_t total_size = 0;

  if (_internal_has_key()) {
    // required int32 key = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_key());
  }

  if (_internal_has_value()) {
    // required int32 value = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_value());
  }

  return total_size;
}
size_t Parameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GraphSubst.Parameter)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 key = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_key());

    // required int32 value = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_value());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Parameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Parameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Parameter::GetClassData() const { return &_class_data_; }

void Parameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Parameter *>(to)->MergeFrom(
      static_cast<const Parameter &>(from));
}


void Parameter::MergeFrom(const Parameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GraphSubst.Parameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      key_ = from.key_;
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Parameter::CopyFrom(const Parameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GraphSubst.Parameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Parameter::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Parameter::InternalSwap(Parameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Parameter, value_)
      + sizeof(Parameter::value_)
      - PROTOBUF_FIELD_OFFSET(Parameter, key_)>(
          reinterpret_cast<char*>(&key_),
          reinterpret_cast<char*>(&other->key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Parameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rules_2eproto_getter, &descriptor_table_rules_2eproto_once,
      file_level_metadata_rules_2eproto[0]);
}

// ===================================================================

class Tensor::_Internal {
 public:
  using HasBits = decltype(std::declval<Tensor>()._has_bits_);
  static void set_has_opid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tsid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

Tensor::Tensor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:GraphSubst.Tensor)
}
Tensor::Tensor(const Tensor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&opid_, &from.opid_,
    static_cast<size_t>(reinterpret_cast<char*>(&tsid_) -
    reinterpret_cast<char*>(&opid_)) + sizeof(tsid_));
  // @@protoc_insertion_point(copy_constructor:GraphSubst.Tensor)
}

inline void Tensor::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&opid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tsid_) -
    reinterpret_cast<char*>(&opid_)) + sizeof(tsid_));
}

Tensor::~Tensor() {
  // @@protoc_insertion_point(destructor:GraphSubst.Tensor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Tensor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Tensor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Tensor::Clear() {
// @@protoc_insertion_point(message_clear_start:GraphSubst.Tensor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&opid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tsid_) -
        reinterpret_cast<char*>(&opid_)) + sizeof(tsid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Tensor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 opId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_opid(&has_bits);
          opid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 tsId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_tsid(&has_bits);
          tsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Tensor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GraphSubst.Tensor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 opId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_opid(), target);
  }

  // required int32 tsId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_tsid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GraphSubst.Tensor)
  return target;
}

size_t Tensor::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GraphSubst.Tensor)
  size_t total_size = 0;

  if (_internal_has_opid()) {
    // required int32 opId = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_opid());
  }

  if (_internal_has_tsid()) {
    // required int32 tsId = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tsid());
  }

  return total_size;
}
size_t Tensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GraphSubst.Tensor)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 opId = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_opid());

    // required int32 tsId = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tsid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Tensor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Tensor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Tensor::GetClassData() const { return &_class_data_; }

void Tensor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Tensor *>(to)->MergeFrom(
      static_cast<const Tensor &>(from));
}


void Tensor::MergeFrom(const Tensor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GraphSubst.Tensor)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      opid_ = from.opid_;
    }
    if (cached_has_bits & 0x00000002u) {
      tsid_ = from.tsid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Tensor::CopyFrom(const Tensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GraphSubst.Tensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tensor::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Tensor::InternalSwap(Tensor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Tensor, tsid_)
      + sizeof(Tensor::tsid_)
      - PROTOBUF_FIELD_OFFSET(Tensor, opid_)>(
          reinterpret_cast<char*>(&opid_),
          reinterpret_cast<char*>(&other->opid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Tensor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rules_2eproto_getter, &descriptor_table_rules_2eproto_once,
      file_level_metadata_rules_2eproto[1]);
}

// ===================================================================

class Operator::_Internal {
 public:
  using HasBits = decltype(std::declval<Operator>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

Operator::Operator(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  input_(arena),
  para_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:GraphSubst.Operator)
}
Operator::Operator(const Operator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      input_(from.input_),
      para_(from.para_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:GraphSubst.Operator)
}

inline void Operator::SharedCtor() {
type_ = 0;
}

Operator::~Operator() {
  // @@protoc_insertion_point(destructor:GraphSubst.Operator)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Operator::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Operator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Operator::Clear() {
// @@protoc_insertion_point(message_clear_start:GraphSubst.Operator)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_.Clear();
  para_.Clear();
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Operator::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .GraphSubst.Tensor input = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_input(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .GraphSubst.Parameter para = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_para(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Operator::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GraphSubst.Operator)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // repeated .GraphSubst.Tensor input = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_input_size()); i < n; i++) {
    const auto& repfield = this->_internal_input(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .GraphSubst.Parameter para = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_para_size()); i < n; i++) {
    const auto& repfield = this->_internal_para(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GraphSubst.Operator)
  return target;
}

size_t Operator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GraphSubst.Operator)
  size_t total_size = 0;

  // required int32 type = 1;
  if (_internal_has_type()) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .GraphSubst.Tensor input = 2;
  total_size += 1UL * this->_internal_input_size();
  for (const auto& msg : this->input_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .GraphSubst.Parameter para = 3;
  total_size += 1UL * this->_internal_para_size();
  for (const auto& msg : this->para_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Operator::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Operator::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Operator::GetClassData() const { return &_class_data_; }

void Operator::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Operator *>(to)->MergeFrom(
      static_cast<const Operator &>(from));
}


void Operator::MergeFrom(const Operator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GraphSubst.Operator)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  input_.MergeFrom(from.input_);
  para_.MergeFrom(from.para_);
  if (from._internal_has_type()) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Operator::CopyFrom(const Operator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GraphSubst.Operator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Operator::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(input_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(para_))
    return false;
  return true;
}

void Operator::InternalSwap(Operator* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  input_.InternalSwap(&other->input_);
  para_.InternalSwap(&other->para_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Operator::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rules_2eproto_getter, &descriptor_table_rules_2eproto_once,
      file_level_metadata_rules_2eproto[2]);
}

// ===================================================================

class MapOutput::_Internal {
 public:
  using HasBits = decltype(std::declval<MapOutput>()._has_bits_);
  static void set_has_srcopid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dstopid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_srctsid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_dsttsid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

MapOutput::MapOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:GraphSubst.MapOutput)
}
MapOutput::MapOutput(const MapOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&srcopid_, &from.srcopid_,
    static_cast<size_t>(reinterpret_cast<char*>(&dsttsid_) -
    reinterpret_cast<char*>(&srcopid_)) + sizeof(dsttsid_));
  // @@protoc_insertion_point(copy_constructor:GraphSubst.MapOutput)
}

inline void MapOutput::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&srcopid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&dsttsid_) -
    reinterpret_cast<char*>(&srcopid_)) + sizeof(dsttsid_));
}

MapOutput::~MapOutput() {
  // @@protoc_insertion_point(destructor:GraphSubst.MapOutput)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MapOutput::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MapOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MapOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:GraphSubst.MapOutput)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&srcopid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dsttsid_) -
        reinterpret_cast<char*>(&srcopid_)) + sizeof(dsttsid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapOutput::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 srcOpId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_srcopid(&has_bits);
          srcopid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 dstOpId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_dstopid(&has_bits);
          dstopid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 srcTsId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_srctsid(&has_bits);
          srctsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 dstTsId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_dsttsid(&has_bits);
          dsttsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MapOutput::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GraphSubst.MapOutput)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 srcOpId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_srcopid(), target);
  }

  // required int32 dstOpId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_dstopid(), target);
  }

  // required int32 srcTsId = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_srctsid(), target);
  }

  // required int32 dstTsId = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_dsttsid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GraphSubst.MapOutput)
  return target;
}

size_t MapOutput::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GraphSubst.MapOutput)
  size_t total_size = 0;

  if (_internal_has_srcopid()) {
    // required int32 srcOpId = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_srcopid());
  }

  if (_internal_has_dstopid()) {
    // required int32 dstOpId = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dstopid());
  }

  if (_internal_has_srctsid()) {
    // required int32 srcTsId = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_srctsid());
  }

  if (_internal_has_dsttsid()) {
    // required int32 dstTsId = 4;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dsttsid());
  }

  return total_size;
}
size_t MapOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GraphSubst.MapOutput)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int32 srcOpId = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_srcopid());

    // required int32 dstOpId = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dstopid());

    // required int32 srcTsId = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_srctsid());

    // required int32 dstTsId = 4;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dsttsid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MapOutput::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MapOutput::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MapOutput::GetClassData() const { return &_class_data_; }

void MapOutput::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MapOutput *>(to)->MergeFrom(
      static_cast<const MapOutput &>(from));
}


void MapOutput::MergeFrom(const MapOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GraphSubst.MapOutput)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      srcopid_ = from.srcopid_;
    }
    if (cached_has_bits & 0x00000002u) {
      dstopid_ = from.dstopid_;
    }
    if (cached_has_bits & 0x00000004u) {
      srctsid_ = from.srctsid_;
    }
    if (cached_has_bits & 0x00000008u) {
      dsttsid_ = from.dsttsid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MapOutput::CopyFrom(const MapOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GraphSubst.MapOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapOutput::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void MapOutput::InternalSwap(MapOutput* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MapOutput, dsttsid_)
      + sizeof(MapOutput::dsttsid_)
      - PROTOBUF_FIELD_OFFSET(MapOutput, srcopid_)>(
          reinterpret_cast<char*>(&srcopid_),
          reinterpret_cast<char*>(&other->srcopid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MapOutput::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rules_2eproto_getter, &descriptor_table_rules_2eproto_once,
      file_level_metadata_rules_2eproto[3]);
}

// ===================================================================

class Rule::_Internal {
 public:
};

Rule::Rule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  srcop_(arena),
  dstop_(arena),
  mappedoutput_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:GraphSubst.Rule)
}
Rule::Rule(const Rule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      srcop_(from.srcop_),
      dstop_(from.dstop_),
      mappedoutput_(from.mappedoutput_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GraphSubst.Rule)
}

inline void Rule::SharedCtor() {
}

Rule::~Rule() {
  // @@protoc_insertion_point(destructor:GraphSubst.Rule)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Rule::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Rule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Rule::Clear() {
// @@protoc_insertion_point(message_clear_start:GraphSubst.Rule)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  srcop_.Clear();
  dstop_.Clear();
  mappedoutput_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Rule::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .GraphSubst.Operator srcOp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_srcop(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .GraphSubst.Operator dstOp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dstop(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .GraphSubst.MapOutput mappedOutput = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mappedoutput(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Rule::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GraphSubst.Rule)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .GraphSubst.Operator srcOp = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_srcop_size()); i < n; i++) {
    const auto& repfield = this->_internal_srcop(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .GraphSubst.Operator dstOp = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_dstop_size()); i < n; i++) {
    const auto& repfield = this->_internal_dstop(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .GraphSubst.MapOutput mappedOutput = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_mappedoutput_size()); i < n; i++) {
    const auto& repfield = this->_internal_mappedoutput(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GraphSubst.Rule)
  return target;
}

size_t Rule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GraphSubst.Rule)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .GraphSubst.Operator srcOp = 1;
  total_size += 1UL * this->_internal_srcop_size();
  for (const auto& msg : this->srcop_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .GraphSubst.Operator dstOp = 2;
  total_size += 1UL * this->_internal_dstop_size();
  for (const auto& msg : this->dstop_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .GraphSubst.MapOutput mappedOutput = 3;
  total_size += 1UL * this->_internal_mappedoutput_size();
  for (const auto& msg : this->mappedoutput_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Rule::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Rule::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Rule::GetClassData() const { return &_class_data_; }

void Rule::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Rule *>(to)->MergeFrom(
      static_cast<const Rule &>(from));
}


void Rule::MergeFrom(const Rule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GraphSubst.Rule)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  srcop_.MergeFrom(from.srcop_);
  dstop_.MergeFrom(from.dstop_);
  mappedoutput_.MergeFrom(from.mappedoutput_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Rule::CopyFrom(const Rule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GraphSubst.Rule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rule::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(srcop_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(dstop_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(mappedoutput_))
    return false;
  return true;
}

void Rule::InternalSwap(Rule* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  srcop_.InternalSwap(&other->srcop_);
  dstop_.InternalSwap(&other->dstop_);
  mappedoutput_.InternalSwap(&other->mappedoutput_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Rule::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rules_2eproto_getter, &descriptor_table_rules_2eproto_once,
      file_level_metadata_rules_2eproto[4]);
}

// ===================================================================

class RuleCollection::_Internal {
 public:
};

RuleCollection::RuleCollection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  rule_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:GraphSubst.RuleCollection)
}
RuleCollection::RuleCollection(const RuleCollection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rule_(from.rule_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GraphSubst.RuleCollection)
}

inline void RuleCollection::SharedCtor() {
}

RuleCollection::~RuleCollection() {
  // @@protoc_insertion_point(destructor:GraphSubst.RuleCollection)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RuleCollection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RuleCollection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RuleCollection::Clear() {
// @@protoc_insertion_point(message_clear_start:GraphSubst.RuleCollection)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rule_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RuleCollection::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .GraphSubst.Rule rule = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rule(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RuleCollection::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GraphSubst.RuleCollection)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .GraphSubst.Rule rule = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rule_size()); i < n; i++) {
    const auto& repfield = this->_internal_rule(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GraphSubst.RuleCollection)
  return target;
}

size_t RuleCollection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GraphSubst.RuleCollection)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .GraphSubst.Rule rule = 1;
  total_size += 1UL * this->_internal_rule_size();
  for (const auto& msg : this->rule_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RuleCollection::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RuleCollection::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RuleCollection::GetClassData() const { return &_class_data_; }

void RuleCollection::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RuleCollection *>(to)->MergeFrom(
      static_cast<const RuleCollection &>(from));
}


void RuleCollection::MergeFrom(const RuleCollection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GraphSubst.RuleCollection)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  rule_.MergeFrom(from.rule_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RuleCollection::CopyFrom(const RuleCollection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GraphSubst.RuleCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuleCollection::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(rule_))
    return false;
  return true;
}

void RuleCollection::InternalSwap(RuleCollection* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  rule_.InternalSwap(&other->rule_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RuleCollection::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rules_2eproto_getter, &descriptor_table_rules_2eproto_once,
      file_level_metadata_rules_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace GraphSubst
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::GraphSubst::Parameter*
Arena::CreateMaybeMessage< ::GraphSubst::Parameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GraphSubst::Parameter >(arena);
}
template<> PROTOBUF_NOINLINE ::GraphSubst::Tensor*
Arena::CreateMaybeMessage< ::GraphSubst::Tensor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GraphSubst::Tensor >(arena);
}
template<> PROTOBUF_NOINLINE ::GraphSubst::Operator*
Arena::CreateMaybeMessage< ::GraphSubst::Operator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GraphSubst::Operator >(arena);
}
template<> PROTOBUF_NOINLINE ::GraphSubst::MapOutput*
Arena::CreateMaybeMessage< ::GraphSubst::MapOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GraphSubst::MapOutput >(arena);
}
template<> PROTOBUF_NOINLINE ::GraphSubst::Rule*
Arena::CreateMaybeMessage< ::GraphSubst::Rule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GraphSubst::Rule >(arena);
}
template<> PROTOBUF_NOINLINE ::GraphSubst::RuleCollection*
Arena::CreateMaybeMessage< ::GraphSubst::RuleCollection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GraphSubst::RuleCollection >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
